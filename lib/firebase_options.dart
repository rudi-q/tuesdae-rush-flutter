// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  // Helper method to get environment variable with proper fallback chain
  static String _getEnvVar(String key, String fallback) {
    if (kIsWeb) {
      // Web: Only use compile-time environment (--dart-define)
      return String.fromEnvironment(key, defaultValue: fallback);
    } else {
      // Native: Try compile-time first, then dotenv, then fallback
      String compileTimeValue = String.fromEnvironment(key, defaultValue: '');
      if (compileTimeValue.isNotEmpty) {
        return compileTimeValue;
      }
      
      String? dotenvValue = dotenv.env[key];
      if (dotenvValue != null && dotenvValue.isNotEmpty && !dotenvValue.endsWith('_NOT_SET')) {
        return dotenvValue;
      }
      
      return fallback;
    }
  }
  
  // Web platform: Use String.fromEnvironment directly (const-compatible)
  static const String _webApiKey = String.fromEnvironment('FIREBASE_WEB_API_KEY', defaultValue: 'WEB_API_KEY_NOT_SET');
  static const String _webAppId = String.fromEnvironment('FIREBASE_WEB_APP_ID', defaultValue: 'WEB_APP_ID_NOT_SET');
  static const String _messagingSenderId = String.fromEnvironment('FIREBASE_MESSAGING_SENDER_ID', defaultValue: 'MESSAGING_SENDER_ID_NOT_SET');
  static const String _projectId = String.fromEnvironment('FIREBASE_PROJECT_ID', defaultValue: 'PROJECT_ID_NOT_SET');
  static const String _storageBucket = String.fromEnvironment('FIREBASE_STORAGE_BUCKET', defaultValue: 'STORAGE_BUCKET_NOT_SET');
  static const String _authDomain = String.fromEnvironment('FIREBASE_AUTH_DOMAIN', defaultValue: 'AUTH_DOMAIN_NOT_SET');
  static const String _measurementId = String.fromEnvironment('FIREBASE_MEASUREMENT_ID', defaultValue: 'MEASUREMENT_ID_NOT_SET');
  
  // Native platform environment variables (still use getters for .env fallback)
  static String get _androidApiKey => _getEnvVar('FIREBASE_ANDROID_API_KEY', 'ANDROID_API_KEY_NOT_SET');
  static String get _androidAppId => _getEnvVar('FIREBASE_ANDROID_APP_ID', 'ANDROID_APP_ID_NOT_SET');
  
  static String get _iosApiKey => _getEnvVar('FIREBASE_IOS_API_KEY', 'IOS_API_KEY_NOT_SET');
  static String get _iosAppId => _getEnvVar('FIREBASE_IOS_APP_ID', 'IOS_APP_ID_NOT_SET');
  
  static String get _macosApiKey => _getEnvVar('FIREBASE_MACOS_API_KEY', 'MACOS_API_KEY_NOT_SET');
  static String get _macosAppId => _getEnvVar('FIREBASE_MACOS_APP_ID', 'MACOS_APP_ID_NOT_SET');
  
  static String get _windowsApiKey => _getEnvVar('FIREBASE_WINDOWS_API_KEY', 'WINDOWS_API_KEY_NOT_SET');
  static String get _windowsAppId => _getEnvVar('FIREBASE_WINDOWS_APP_ID', 'WINDOWS_APP_ID_NOT_SET');
  
  static FirebaseOptions get web => FirebaseOptions(
    apiKey: _webApiKey,
    appId: _webAppId,
    messagingSenderId: _messagingSenderId,
    projectId: _projectId,
    authDomain: _authDomain,
    storageBucket: _storageBucket,
    measurementId: _measurementId,
  );

  static FirebaseOptions get android => FirebaseOptions(
    apiKey: _androidApiKey,
    appId: _androidAppId,
    messagingSenderId: _messagingSenderId,
    projectId: _projectId,
    storageBucket: _storageBucket,
  );

  static FirebaseOptions get ios => FirebaseOptions(
    apiKey: _iosApiKey,
    appId: _iosAppId,
    messagingSenderId: _messagingSenderId,
    projectId: _projectId,
    storageBucket: _storageBucket,
    iosBundleId: 'games.tuesdae.tuesdae-rush',
  );

  static FirebaseOptions get macos => FirebaseOptions(
    apiKey: _macosApiKey,
    appId: _macosAppId,
    messagingSenderId: _messagingSenderId,
    projectId: _projectId,
    storageBucket: _storageBucket,
    iosBundleId: 'games.tuesdae.tuesdae-rush',
  );

  static FirebaseOptions get windows => FirebaseOptions(
    apiKey: _windowsApiKey,
    appId: _windowsAppId,
    messagingSenderId: _messagingSenderId,
    projectId: _projectId,
    authDomain: _authDomain,
    storageBucket: _storageBucket,
  );
}
