// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  // Shared environment variables
  static String get _messagingSenderId => dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? 'MESSAGING_SENDER_ID_NOT_SET';
  static String get _projectId => dotenv.env['FIREBASE_PROJECT_ID'] ?? 'PROJECT_ID_NOT_SET';
  static String get _storageBucket => dotenv.env['FIREBASE_STORAGE_BUCKET'] ?? 'STORAGE_BUCKET_NOT_SET';
  static String get _authDomain => dotenv.env['FIREBASE_AUTH_DOMAIN'] ?? 'AUTH_DOMAIN_NOT_SET';
  
  // Platform-specific environment variables
  static String get _androidApiKey => dotenv.env['FIREBASE_ANDROID_API_KEY'] ?? 'ANDROID_API_KEY_NOT_SET';
  static String get _androidAppId => dotenv.env['FIREBASE_ANDROID_APP_ID'] ?? 'ANDROID_APP_ID_NOT_SET';
  
  static String get _webApiKey => dotenv.env['FIREBASE_WEB_API_KEY'] ?? 'WEB_API_KEY_NOT_SET';
  static String get _webAppId => dotenv.env['FIREBASE_WEB_APP_ID'] ?? 'WEB_APP_ID_NOT_SET';
  static String get _measurementId => dotenv.env['FIREBASE_MEASUREMENT_ID'] ?? 'MEASUREMENT_ID_NOT_SET';
  
  static String get _iosApiKey => dotenv.env['FIREBASE_IOS_API_KEY'] ?? 'IOS_API_KEY_NOT_SET';
  static String get _iosAppId => dotenv.env['FIREBASE_IOS_APP_ID'] ?? 'IOS_APP_ID_NOT_SET';
  
  static String get _macosApiKey => dotenv.env['FIREBASE_MACOS_API_KEY'] ?? 'MACOS_API_KEY_NOT_SET';
  static String get _macosAppId => dotenv.env['FIREBASE_MACOS_APP_ID'] ?? 'MACOS_APP_ID_NOT_SET';
  
  static String get _windowsApiKey => dotenv.env['FIREBASE_WINDOWS_API_KEY'] ?? 'WINDOWS_API_KEY_NOT_SET';
  static String get _windowsAppId => dotenv.env['FIREBASE_WINDOWS_APP_ID'] ?? 'WINDOWS_APP_ID_NOT_SET';
  
  static FirebaseOptions get web => FirebaseOptions(
    apiKey: _webApiKey,
    appId: _webAppId,
    messagingSenderId: _messagingSenderId,
    projectId: _projectId,
    authDomain: _authDomain,
    storageBucket: _storageBucket,
    measurementId: _measurementId,
  );

  static FirebaseOptions get android => FirebaseOptions(
    apiKey: _androidApiKey,
    appId: _androidAppId,
    messagingSenderId: _messagingSenderId,
    projectId: _projectId,
    storageBucket: _storageBucket,
  );

  static FirebaseOptions get ios => FirebaseOptions(
    apiKey: _iosApiKey,
    appId: _iosAppId,
    messagingSenderId: _messagingSenderId,
    projectId: _projectId,
    storageBucket: _storageBucket,
    iosBundleId: 'games.tuesdae.tuesdae-rush',
  );

  static FirebaseOptions get macos => FirebaseOptions(
    apiKey: _macosApiKey,
    appId: _macosAppId,
    messagingSenderId: _messagingSenderId,
    projectId: _projectId,
    storageBucket: _storageBucket,
    iosBundleId: 'games.tuesdae.tuesdae-rush',
  );

  static FirebaseOptions get windows => FirebaseOptions(
    apiKey: _windowsApiKey,
    appId: _windowsAppId,
    messagingSenderId: _messagingSenderId,
    projectId: _projectId,
    authDomain: _authDomain,
    storageBucket: _storageBucket,
  );
}
